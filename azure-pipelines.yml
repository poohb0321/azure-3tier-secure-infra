trigger:
- main

variables:
- group: backend-secrets

stages:
- stage: Dev
  displayName: "Deploy to Dev"
  jobs:
  - job: TerraformDev
    displayName: "Terraform ‚Äì Dev"
    pool:
      name: mypool

    steps:
    - checkout: self

    - task: AzureCLI@2
      displayName: "Azure CLI login check"
      inputs:
        azureSubscription: AzureSPN
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          Write-Host "üîê Logged in Azure CLI account:"
          az account show

    # ‚úÖ tfsec security scan step
    - powershell: |
        Write-Host "üì• Downloading tfsec..."
        Invoke-WebRequest -Uri "https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-windows-amd64.exe" -OutFile "$(Build.SourcesDirectory)\tfsec.exe"
        Write-Host "üîç Running tfsec scan..."
        & "$(Build.SourcesDirectory)\tfsec.exe" ./environments/dev --out=results.json --format=json --no-color
        $results = Get-Content "$(Build.SourcesDirectory)\results.json" | ConvertFrom-Json
        $failures = $results | Where-Object { $_.severity -eq "HIGH" -or $_.severity -eq "CRITICAL" }
        if ($failures.Count -gt 0) {
          Write-Error "‚ùå tfsec found $($failures.Count) HIGH or CRITICAL issues. Failing build."
          exit 1
        } else {
          Write-Host "‚úÖ tfsec passed. No critical risks."
        }
      displayName: "Run tfsec and fail on HIGH/CRITICAL"

    - script: |
        echo "üì• Installing Checkov..."
        pip install checkov
        echo "üîç Running Checkov scan..."
        checkov -d ./environments/dev --output json --output-file-path results-checkov.json
        $results = Get-Content "results-checkov.json" | ConvertFrom-Json
        $highFindings = $results.results.failed_checks | Where-Object { $_.severity -eq "HIGH" -or $_.severity -eq "CRITICAL" }
        if ($highFindings.Count -gt 0) {
          Write-Error "‚ùå Checkov found $($highFindings.Count) HIGH or CRITICAL issues. Failing build."
          exit 1
        } else {
          Write-Host "‚úÖ Checkov passed. No critical risks."
        }
      displayName: "Run Checkov and fail on HIGH/CRITICAL"
      shell: pwsh

    - task: PublishBuildArtifacts@1
      displayName: "Upload Checkov results"
      inputs:
        PathtoPublish: 'results-checkov.json'
        ArtifactName: 'checkov-results'
        publishLocation: 'Container'



    - task: PublishBuildArtifacts@1
      displayName: "Upload tfsec results"
      inputs:
        PathtoPublish: 'results.json'
        ArtifactName: 'tfsec-results'
        publishLocation: 'Container'

    - script: terraform init -upgrade
      workingDirectory: '$(System.DefaultWorkingDirectory)/environments/dev'
      displayName: "Terraform init (refresh providers)"

    - task: TerraformTask@5
      displayName: "Terraform backend init"
      inputs:
        provider: azurerm
        command: init
        workingDirectory: '$(System.DefaultWorkingDirectory)/environments/dev'
        backendServiceArm: AzureSPN
        backendAzureRmSubscriptionId: '0a7eb3ba-cd21-4466-91fd-04134b38423f'
        backendAzureRmResourceGroupName: 'rg-secure-infra'
        backendAzureRmStorageAccountName: 'secureterraformstate123'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'dev.tfstate'
        commandOptions: '-upgrade -reconfigure'

    - script: |
        terraform version
        terraform providers
      workingDirectory: '$(System.DefaultWorkingDirectory)/environments/dev'
      displayName: "Terraform versions"

    - task: TerraformTask@5
      displayName: "Terraform validate"
      inputs:
        provider: azurerm
        command: validate
        workingDirectory: '$(System.DefaultWorkingDirectory)/environments/dev'

    - task: TerraformTask@5
      displayName: "Terraform plan"
      inputs:
        provider: azurerm
        command: plan
        workingDirectory: '$(System.DefaultWorkingDirectory)/environments/dev'
        environmentServiceNameAzureRM: AzureSPN
        environmentAzureRmSubscriptionId: '0a7eb3ba-cd21-4466-91fd-04134b38423f'
        commandOptions: '-out=tfplan -detailed-exitcode -lock=false'

    - task: TerraformTask@5
      displayName: "Terraform apply"
      inputs:
        provider: azurerm
        command: apply
        workingDirectory: '$(System.DefaultWorkingDirectory)/environments/dev'
        environmentServiceNameAzureRM: AzureSPN
        environmentAzureRmSubscriptionId: '0a7eb3ba-cd21-4466-91fd-04134b38423f'
        commandOptions: '-auto-approve tfplan'

- stage: Prod
  displayName: "Deploy to Prod"
  dependsOn: Dev
  condition: succeeded()
  jobs:
  - job: TerraformProd
    displayName: "Terraform ‚Äì Prod"
    pool:
      name: mypool

    steps:
    - checkout: self

    - script: terraform init -upgrade
      workingDirectory: '$(System.DefaultWorkingDirectory)/environments/prod'
      displayName: "Terraform init (prod)"

    - task: TerraformTask@5
      displayName: "Terraform backend init (prod)"
      inputs:
        provider: azurerm
        command: init
        workingDirectory: '$(System.DefaultWorkingDirectory)/environments/prod'
        backendServiceArm: AzureSPN
        backendAzureRmSubscriptionId: '0a7eb3ba-cd21-4466-91fd-04134b38423f'
        backendAzureRmResourceGroupName: 'rg-prod-infra'
        backendAzureRmStorageAccountName: 'secureterraformstate123'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'prod.tfstate'
        commandOptions: '-upgrade -reconfigure'

    - task: TerraformTask@5
      displayName: "Terraform validate (prod)"
      inputs:
        provider: azurerm
        command: validate
        workingDirectory: '$(System.DefaultWorkingDirectory)/environments/prod'

    - task: TerraformTask@5
      displayName: "Terraform plan (prod)"
      inputs:
        provider: azurerm
        command: plan
        workingDirectory: '$(System.DefaultWorkingDirectory)/environments/prod'
        environmentServiceNameAzureRM: AzureSPN
        environmentAzureRmSubscriptionId: '0a7eb3ba-cd21-4466-91fd-04134b38423f'
        commandOptions: '-out=tfplan -detailed-exitcode -lock=false'

    - task: TerraformTask@5
      displayName: "Terraform apply (prod)"
      inputs:
        provider: azurerm
        command: apply
        workingDirectory: '$(System.DefaultWorkingDirectory)/environments/prod'
        environmentServiceNameAzureRM: AzureSPN
        environmentAzureRmSubscriptionId: '0a7eb3ba-cd21-4466-91fd-04134b38423f'
        commandOptions: '-auto-approve tfplan'
