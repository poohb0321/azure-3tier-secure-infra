# azure-pipelines.yml  – root of repo
# -------------------------------------------------
trigger:
- main                   # run on every push to main

variables:
- group: backend-secrets # loads ARM_* env‑vars (client‑ID, secret, tenant, sub)

stages:
# ───────────────────────────── Dev stage ─────────────────────────────
- stage: Dev
  displayName: "Deploy to Dev"
  jobs:
  - job: Terraform
    displayName: "Terraform – Dev"
    pool: mypool

    steps:
    # 1) Checkout code
    - checkout: self

    # 2) Azure CLI login (quick sanity‑check the service connection)
    - task: AzureCLI@2
      displayName: "Azure CLI login via SPN"
      inputs:
        azureSubscription: AzureSPN    # ← service‑connection *exact* name
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: echo "Azure login OK"

    # 3) (optional) tfsec scan
    - script: |
        curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
        tfsec environments/dev --no-color
      displayName: "tfsec scan"

    # ─────────── Terraform tasks (official extension) ───────────
    # 4) terraform init  (remote backend in new subscription)
    - task: TerraformTask@5
      displayName: "Terraform init"
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'AzureSPN'
        backendAzureRmResourceGroupName: 'rg-secure-infra'
        backendAzureRmStorageAccountName: 'secureterraformstate'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'dev.tfstate'
        backendAzureRmSubscriptionId: '0a7eb3ba-cd21-4466-91fd-04134b38423f'

    # 5) terraform validate
    - task: TerraformTask@5
      displayName: "Terraform validate"
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/environments/dev'

    # 6) terraform plan
    - task: TerraformTask@5
      displayName: "Terraform plan"
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/environments/dev'
        environmentServiceNameAzureRM: 'AzureSPN'
        environmentAzureRmSubscriptionId: '0a7eb3ba-cd21-4466-91fd-04134b38423f'
        commandOptions: '-out=tfplan'

    # 7) terraform apply  (auto‑approve; remove flag for manual approval)
    - task: TerraformTask@5
      displayName: "Terraform apply"
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/environments/dev'
        environmentServiceNameAzureRM: 'AzureSPN'
        environmentAzureRmSubscriptionId: '0a7eb3ba-cd21-4466-91fd-04134b38423f'
        commandOptions: '-auto-approve tfplan'
      env:
        TF_LOG: ERROR
