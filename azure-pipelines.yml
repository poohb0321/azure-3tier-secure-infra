# azure-pipelines.yml  ─ root of repo
# =================================================
trigger:
- main                    # run on each push to main

variables:
- group: backend-secrets  # loads ARM_CLIENT_ID / SECRET / TENANT / SUB

stages:
# ───────────────────────────── Dev stage ─────────────────────────────
- stage: Dev
  displayName: "Deploy to Dev"
  jobs:
  - job: Terraform
    displayName: "Terraform – Dev"
    pool:
      name: mypool         # <- change to vmImage: ubuntu-latest if you use MS-hosted agents

    steps:
    # 1) Checkout repo
    - checkout: self

    # 2) Quick Azure-CLI sanity check (via service connection)
    - task: AzureCLI@2
      displayName: "Azure CLI login via SPN"
      inputs:
        azureSubscription: AzureSPN
        scriptType: ps         # or use 'ps'
        scriptLocation: inlineScript
        inlineScript: |
          az account show

    - task: tfsec@1
      displayName: "Run tfsec security scan"
      inputs:
        version: 'v1.26.0'
        directory: 'environments/dev'
        outputFormat: 'default'
        additionalArgs: '--no-color'
        debug: false

    # 4) terraform init  (remote backend)
    - task: TerraformTask@5
      displayName: "Terraform init"
      inputs:
        provider: azurerm
        command: init
        workingDirectory: '$(System.DefaultWorkingDirectory)/environments/dev'
        backendServiceArm: AzureSPN
        backendAzureRmSubscriptionId: '0a7eb3ba-cd21-4466-91fd-04134b38423f'
        backendAzureRmResourceGroupName: 'rg-secure-infra'
        backendAzureRmStorageAccountName: 'secureterraformstate123'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'dev.tfstate'

    # 5) terraform validate
    - task: TerraformTask@5
      displayName: "Terraform validate"
      inputs:
        provider: azurerm
        command: validate
        workingDirectory: '$(System.DefaultWorkingDirectory)/environments/dev'

    # 6) terraform plan
    - task: TerraformTask@5
      displayName: "Terraform plan"
      inputs:
        provider: azurerm
        command: plan
        workingDirectory: '$(System.DefaultWorkingDirectory)/environments/dev'
        environmentServiceNameAzureRM: AzureSPN
        environmentAzureRmSubscriptionId: '0a7eb3ba-cd21-4466-91fd-04134b38423f'
        commandOptions: '-out=tfplan'
      env:
        TF_LOG: INFO

    # 7) terraform apply  (auto-approve; remove flag for manual gate)
    - task: TerraformTask@5
      displayName: "Terraform apply"
      inputs:
        provider: azurerm
        command: apply
        workingDirectory: '$(System.DefaultWorkingDirectory)/environments/dev'
        environmentServiceNameAzureRM: AzureSPN
        environmentAzureRmSubscriptionId: '0a7eb3ba-cd21-4466-91fd-04134b38423f'
        commandOptions: '-auto-approve tfplan'
      env:
        TF_LOG: ERROR



