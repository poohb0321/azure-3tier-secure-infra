# azure-pipelines.yml ‚Äî root of repo
# =================================================
trigger:
- main  # Run on push to main branch

variables:
- group: backend-secrets  # ARM_CLIENT_ID / SECRET / TENANT / SUB

stages:
- stage: Dev
  displayName: "Deploy to Dev"
  jobs:
  - job: Terraform
    displayName: "Terraform ‚Äì Dev"
    pool:
      name: mypool

    steps:
    # 1) Checkout code
    - checkout: self

    # 2) Azure CLI sanity check and Key Vault access simulation
    - task: AzureCLI@2
      displayName: "Azure CLI login + simulate Key Vault access"
      inputs:
        azureSubscription: AzureSPN
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          Write-Host "üîç Sanity check: Azure account info"
          az account show

          Write-Host "‚è≥ Waiting 20s before Key Vault access..."
          Start-Sleep -Seconds 20

          Write-Host "üîê Simulating Key Vault access using 'az keyvault show'"
          az keyvault show --name kv-dev-pooja-0321

    # 3) Run tfsec and fail on HIGH/CRITICAL
    - powershell: |
        Write-Host "Downloading tfsec..."
        Invoke-WebRequest -Uri "https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-windows-amd64.exe" -OutFile "$(Build.SourcesDirectory)\tfsec.exe"

        Write-Host "Running tfsec scan..."
        & "$(Build.SourcesDirectory)\tfsec.exe" ./environments/dev --out=results.json --format=json --no-color

        Write-Host "Parsing tfsec results..."
        $results = Get-Content "$(Build.SourcesDirectory)\results.json" | ConvertFrom-Json
        $failures = $results | Where-Object { $_.severity -eq "HIGH" -or $_.severity -eq "CRITICAL" }

        if ($failures.Count -gt 0) {
          Write-Error "tfsec found $($failures.Count) HIGH or CRITICAL issues. Failing build."
          exit 1
        } else {
          Write-Host "‚úÖ tfsec completed with only LOW/MEDIUM issues. Build will continue."
          exit 0
        }
      displayName: "Run tfsec scan (fail on HIGH/CRITICAL)"
      continueOnError: false

    # 4) Publish tfsec results
    - task: PublishBuildArtifacts@1
      displayName: "Publish tfsec JSON report"
      inputs:
        PathtoPublish: 'results.json'
        ArtifactName: 'tfsec-results'
        publishLocation: 'Container'

    # 5) Terraform init with upgrade
    - script: terraform init -upgrade
      workingDirectory: '$(System.DefaultWorkingDirectory)/environments/dev'
      displayName: "Terraform init with upgrade (provider refresh)"

    # 6) Terraform init (with backend)
    - task: TerraformTask@5
      displayName: "Terraform init with backend"
      inputs:
        provider: azurerm
        command: init
        workingDirectory: '$(System.DefaultWorkingDirectory)/environments/dev'
        backendServiceArm: AzureSPN
        backendAzureRmSubscriptionId: '0a7eb3ba-cd21-4466-91fd-04134b38423f'
        backendAzureRmResourceGroupName: 'rg-secure-infra'
        backendAzureRmStorageAccountName: 'secureterraformstate123'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'dev.tfstate'
        commandOptions: '-upgrade -reconfigure'

    # 7) Show provider and Terraform versions (debug)
    - script: |
        terraform version
        terraform providers
      workingDirectory: '$(System.DefaultWorkingDirectory)/environments/dev'
      displayName: "Terraform version & providers"

    # 8) Terraform validate
    - task: TerraformTask@5
      displayName: "Terraform validate"
      inputs:
        provider: azurerm
        command: validate
        workingDirectory: '$(System.DefaultWorkingDirectory)/environments/dev'

    # 9) Terraform plan
    - task: TerraformTask@5
      displayName: "Terraform plan"
      inputs:
        provider: azurerm
        command: plan
        workingDirectory: '$(System.DefaultWorkingDirectory)/environments/dev'
        environmentServiceNameAzureRM: AzureSPN
        environmentAzureRmSubscriptionId: '0a7eb3ba-cd21-4466-91fd-04134b38423f'
        commandOptions: '-out=tfplan -detailed-exitcode -lock=false'
      env:
        TF_LOG: INFO

    # 10) Terraform apply
    - task: TerraformTask@5
      displayName: "Terraform apply"
      inputs:
        provider: azurerm
        command: apply
        workingDirectory: '$(System.DefaultWorkingDirectory)/environments/dev'
        environmentServiceNameAzureRM: AzureSPN
        environmentAzureRmSubscriptionId: '0a7eb3ba-cd21-4466-91fd-04134b38423f'
        commandOptions: '-auto-approve tfplan'
      env:
        TF_LOG: ERROR
